[project]
name = "slmops"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
  "go-task-bin>=3.41.0",
  "pre-commit>=4.1.0",
  "skypilot[gcp]>=0.8.0",
]

[tool.uv.sources]
ml = { path = "packages/ml" }
pyapp = { path = "packages/app/pyapp"}
data = { path = "packages/data"}
orchestration = { path = "packages/orchestration" }
serve = { path = "packages/app/serve" }

[dependency-groups]
serve-package = [
    "serve",
]

orchestration-package = [
    "orchestration",
]

data-nl-package = [
    "data[nlp]",
]

ml-package = [
    "ml",
]

app-package = [
    "pyapp",
]

all-dev = [
    "pyapp",
    "data",
    "ipykernel>=6.29.5",
    "ml",
    "orchestration",
]

all-package = [
    "pyapp",
    "data",
    "ml",
    "orchestration",
]

[tool.ruff]
line-length = 88
target-version = "py39"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "DTZ", # flake8-datetimez,
    "E4", "E7", "E9", "F"
]
ignore = [
    "E501",  # line too long, handled by formatter
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.ruff.isort]
known-first-party = ["data", "ml", "orchestration"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true
